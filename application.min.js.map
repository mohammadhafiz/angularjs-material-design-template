{"version":3,"sources":["functions.js","application.js","settings.js","login.js","en.js","ms.js","login_controller.js","api.js","auth.js","http_interceptor.js"],"names":["w","a","encrypt","m","k","element","document","injector","get","e","CryptoJS","AES","toString","decrypt","d","enc","Utf8","window","angular","application","module","config","$httpProvider","defaults","headers","common","Accept","post","Content-Type","put","delete","interceptors","push","$mdThemingProvider","alwaysWatchTheme","theme","primaryPalette","accentPalette","default","$translateProvider","useSanitizeValueStrategy","preferredLanguage","$locationProvider","$routeProvider","html5Mode","hashPrefix","otherwise","redirectTo","run","$location","$rootScope","Auth","$on","event","current","previous","rejection","path","forget","factory","$window","h","secret","settings","host","ht","client_id","id","client_secret","st","scopes","when","controller","templateUrl","resolve","isGuest","translations","toast_incorrect_credentials","toast_invalid_refresh_token","toast_method_not_allowed","toast_validation_failed","validation_maxlength_24","validation_maxlength_255","validation_maxlength_40","validation_minlength_4","validation_required","$scope","credentials","username","password","login","verify","then","session","Settings","api","access_token","users","endpoint","concat","$http","$q","API","auth","deferred","defer","localStorage","removeItem","promise","handler","response","expires_in","data","refresh_token","token_type","hasOwnProperty","fromJson","isLogged","reject","refresh","grant_type","scope","join","console","info","toJson","type","$injector","$translate","refreshPromise","httpInterceptor","request","Authorization","responseError","error","status","text","$mdToast","toast","simple","content","position","show","message"],"mappings":"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","file":"application.min.js","sourcesContent":["(function(w, a)\r\n{\r\n    w.encrypt = function(m, k)\r\n    {\r\n        k = typeof k === 'undefined' ? a.element(document).injector().get('secret') : k;\r\n        var e = w.CryptoJS.AES.encrypt(m, k);\r\n        return e.toString();\r\n    };\r\n\r\n    w.decrypt = function(m, k)\r\n    {\r\n        k = typeof k === 'undefined' ? a.element(document).injector().get('secret') : k;\r\n        var d = w.CryptoJS.AES.decrypt(m, k);\r\n        return d.toString(w.CryptoJS.enc.Utf8);\r\n    };\r\n})(window, angular);\r\n","var application = angular.module('application', [\r\n    'm',\r\n    'ngAnimate',\r\n    'ngAria',\r\n    'ngMaterial',\r\n    'ngMessageFormat',\r\n    'ngMessages',\r\n    'ngResource',\r\n    'ngRoute',\r\n    'ngSanitize',\r\n    'pascalprecht.translate', // angular-translate\r\n    'application.templates', // application templates cache\r\n]);\r\n\r\napplication.config(['$httpProvider',\r\n    function($httpProvider)\r\n    {\r\n        $httpProvider.defaults.headers = {\r\n            common: {\r\n                Accept: 'application/vnd.menggaris.v1+json',\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            put: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            delete: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        $httpProvider.interceptors.push('HttpInterceptor');\r\n    }]);\r\n\r\napplication.config(['$mdThemingProvider',\r\n    function($mdThemingProvider)\r\n    {\r\n        $mdThemingProvider.alwaysWatchTheme(true);\r\n        \r\n        $mdThemingProvider.theme('cyan')\r\n            .primaryPalette('cyan')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('purple')\r\n            .primaryPalette('purple')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('red')\r\n            .primaryPalette('red')\r\n            .accentPalette('indigo');\r\n\r\n        $mdThemingProvider.theme('teal')\r\n            .primaryPalette('teal')\r\n            .accentPalette('indigo');\r\n            \r\n        $mdThemingProvider.theme('grey')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n\r\n        $mdThemingProvider.theme('white')\r\n            .primaryPalette('grey', {\r\n                default: '200',\r\n            })\r\n            .accentPalette('blue');\r\n    }]);\r\n\r\napplication.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.useSanitizeValueStrategy('sanitize');\r\n        $translateProvider.preferredLanguage('en');\r\n    }]);\r\n\r\napplication.config(['$locationProvider', '$routeProvider',\r\n    function($locationProvider, $routeProvider)\r\n    {\r\n        $locationProvider.html5Mode(true)\r\n            .hashPrefix('!#');\r\n\r\n        $routeProvider.otherwise({\r\n                redirectTo: '/login',\r\n            });\r\n    }]);\r\n\r\napplication.run(['$location', '$rootScope', 'Auth',\r\n    function($location, $rootScope, Auth)\r\n    {\r\n        $rootScope.$on('$routeChangeError', function(event, current, previous, rejection)\r\n        {\r\n            switch (rejection) {\r\n                case 'auth.is_guest':\r\n                    $location.path('/modules');\r\n                    break;\r\n                case 'auth.is_logged':\r\n                    Auth.forget();\r\n                    break;\r\n            }\r\n        });\r\n    }]);\r\n","application.factory('Settings', ['$window', 'h', 'secret',\r\n    function($window, h, secret)\r\n    {\r\n        var settings = {};\r\n\r\n        settings.host           = $window.decrypt(h.ht, secret);\r\n        settings.client_id      = $window.decrypt(h.id, secret);\r\n        settings.client_secret  = $window.decrypt(h.st, secret);\r\n\r\n        settings.scopes = [\r\n            // Client credentials\r\n            'create_client_data',\r\n            'read_client_data',\r\n            'update_client_data',\r\n            'delete_client_data',\r\n\r\n        ];\r\n\r\n        return settings;\r\n    }]);\r\n","application.config(['$routeProvider',\r\n    function($routeProvider)\r\n    {\r\n        $routeProvider\r\n            .when('/login', {\r\n                controller: 'LoginController',\r\n                templateUrl: 'login.html',\r\n                resolve: {\r\n                    isGuest: ['Auth', function(Auth)\r\n                    {\r\n                        return Auth.isGuest();\r\n                    }],\r\n                },\r\n            });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('en', {\r\n\r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n            'toast_invalid_refresh_token': 'The refresh token is invalid.',\r\n            'toast_method_not_allowed': 'Request to the resource is not allowed.',\r\n            'toast_validation_failed': 'Validation failed on server.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_maxlength_255': 'This field may not be greater than 255 characters.',\r\n            'validation_maxlength_40': 'This field may not be greater than 40 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.config(['$translateProvider',\r\n    function($translateProvider)\r\n    {\r\n        $translateProvider.translations('ms', {\r\n        \r\n            'toast_incorrect_credentials': 'The user credentials is incorrect.',\r\n            'toast_invalid_refresh_token': 'The refresh token is invalid.',\r\n            'toast_method_not_allowed': 'Request to the resource is not allowed.',\r\n            'toast_validation_failed': 'Validation failed on server.',\r\n\r\n            'validation_maxlength_24': 'This field may not be greater than 24 characters.',\r\n            'validation_maxlength_255': 'This field may not be greater than 255 characters.',\r\n            'validation_maxlength_40': 'This field may not be greater than 40 characters.',\r\n            'validation_minlength_4': 'This field must be at least 4 characters.',\r\n            'validation_required': 'This field is required.',\r\n        });\r\n    }]);\r\n","application.controller('LoginController', ['$location', '$scope', 'Auth', 'isGuest',\r\n    function($location, $scope, Auth, isGuest)\r\n    {\r\n        $scope.credentials = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n\r\n        $scope.login = function(credentials)\r\n        {\r\n            Auth.verify(credentials)\r\n                .then(function (session) {\r\n                    $location.path('/modules');\r\n                });\r\n        };\r\n    }]);\r\n","application.factory('API', ['Settings',\r\n    function(Settings)\r\n    {\r\n        var api = {};\r\n\r\n        api.access_token    = '/api/access_token';\r\n        api.session         = '/api/session';\r\n        api.users           = '/api/users/:user_id';\r\n        \r\n        api.get = function(endpoint)\r\n        {\r\n            return Settings.host.concat(api[endpoint]);\r\n        };\r\n\r\n        return api;\r\n    }]);\r\n","application.factory('Auth', ['$http', '$location', '$q', '$window', 'API', 'Settings',\r\n    function($http, $location, $q, $window, API, Settings)\r\n    {\r\n        var auth = {};\r\n\r\n        auth.forget = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            $window.localStorage.removeItem('expires_in');\r\n            $window.localStorage.removeItem('access_token');\r\n            $window.localStorage.removeItem('refresh_token');\r\n            $window.localStorage.removeItem('token_type');\r\n            $window.localStorage.removeItem('id');\r\n            $window.localStorage.removeItem('type');\r\n            $window.localStorage.removeItem('scopes');\r\n            $location.path('/login');\r\n\r\n            deferred.resolve();\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.handler = function(response)\r\n        {\r\n            $window.localStorage.expires_in      = response.data.expires_in;\r\n            $window.localStorage.access_token    = response.data.access_token;\r\n            $window.localStorage.refresh_token   = response.data.refresh_token;\r\n            $window.localStorage.token_type      = response.data.token_type;\r\n            return response;\r\n        };\r\n\r\n        auth.id = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('id')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.id);\r\n        };\r\n\r\n        auth.isGuest = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            auth.isLogged()\r\n                .then(function()\r\n                {\r\n                    deferred.reject('auth.is_guest');\r\n                })\r\n                .catch(function()\r\n                {\r\n                    deferred.resolve(true);\r\n                });\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.isLogged = function()\r\n        {\r\n            var deferred = $q.defer();\r\n\r\n            if ($window.localStorage.hasOwnProperty('expires_in') &&\r\n                $window.localStorage.hasOwnProperty('access_token') &&\r\n                $window.localStorage.hasOwnProperty('refresh_token') &&\r\n                $window.localStorage.hasOwnProperty('token_type')) {\r\n                deferred.resolve(true);\r\n            } else {\r\n                deferred.reject('auth.is_logged');\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        auth.refresh = function()\r\n        {\r\n            var data = {\r\n                grant_type: 'refresh_token',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                refresh_token: $window.localStorage.refresh_token,\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        auth.scopes = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('scopes')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.scopes);\r\n        };\r\n\r\n        auth.session = function()\r\n        {\r\n            return $http.get(API.get('session'))\r\n                .then(function(session)\r\n                {\r\n                    console.info(session);\r\n                    $window.localStorage.id = angular.toJson(session.data.id);\r\n                    $window.localStorage.type = angular.toJson(session.data.type);\r\n                    $window.localStorage.scopes = angular.toJson(session.data.scopes);\r\n                });\r\n        };\r\n\r\n        auth.type = function()\r\n        {\r\n            if (!$window.localStorage.hasOwnProperty('type')) {\r\n                return false;\r\n            }\r\n\r\n            return angular.fromJson($window.localStorage.type);\r\n        };\r\n\r\n        auth.verify = function(credentials)\r\n        {\r\n            var data = {\r\n                grant_type: 'password',\r\n                client_id: Settings.client_id,\r\n                client_secret: Settings.client_secret,\r\n                scope: Settings.scopes.join(),\r\n                username: credentials['username'],\r\n                password: credentials['password'],\r\n            };\r\n\r\n            return $http.post(API.get('access_token'), data)\r\n                .then(auth.handler);\r\n        };\r\n\r\n        return auth;\r\n    }]);\r\n\r\n","application.factory('HttpInterceptor', ['$injector', '$q', '$translate', '$window',\r\n    function($injector, $q, $translate, $window)\r\n    {\r\n        var refreshPromise = null;\r\n\r\n        var httpInterceptor = {};\r\n\r\n        httpInterceptor.request = function(config)\r\n        {\r\n            if ($injector.get('Auth').isLogged()) {\r\n                var token_type = $window.localStorage.token_type;\r\n                var access_token = $window.localStorage.access_token;\r\n                config.headers.Authorization = token_type + ' ' + access_token;\r\n            }\r\n\r\n            return config;\r\n        };\r\n\r\n        httpInterceptor.responseError = function(rejection)\r\n        {\r\n            console.error(rejection);\r\n\r\n            switch (rejection.status) {\r\n                case 401:\r\n                    refreshPromise = refreshPromise ? refreshPromise :\r\n                        $injector.get('Auth').refresh();\r\n\r\n                    return refreshPromise.finally(function()\r\n                        {\r\n                            refreshPromise = null;\r\n                        })\r\n                        .then(function()\r\n                        {\r\n                            return $injector.get('$http')(rejection.config);\r\n                        });\r\n\r\n                case 405:\r\n                    $translate('toast_method_not_allowed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 422:\r\n                    $translate('toast_validation_failed')\r\n                        .then(function(text)\r\n                        {\r\n                            var $mdToast = $injector.get('$mdToast');\r\n                            var toast = $mdToast.simple()\r\n                                .content(text)\r\n                                .position('bottom left right');\r\n                            $mdToast.show(toast);\r\n                        });\r\n\r\n                    return $q.reject(rejection);\r\n\r\n                case 500:\r\n                    if (rejection.data.message == 'The user credentials were incorrect.') {\r\n                        $translate('toast_incorrect_credentials')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n\r\n                        return $q.reject(rejection);\r\n                    }\r\n\r\n                    if (rejection.data.message == 'The refresh token is invalid.') {\r\n                        $translate('toast_invalid_refresh_token')\r\n                            .then(function(text)\r\n                            {\r\n                                var $mdToast = $injector.get('$mdToast');\r\n                                var toast = $mdToast.simple()\r\n                                    .content(text)\r\n                                    .position('bottom left right');\r\n                                $mdToast.show(toast);\r\n                            });\r\n                    }\r\n\r\n                    $injector.get('Auth')\r\n                        .forget();\r\n\r\n                    return $q.reject(rejection);\r\n            }\r\n        };\r\n\r\n        return httpInterceptor;\r\n    }]);\r\n"],"sourceRoot":"/source/"}